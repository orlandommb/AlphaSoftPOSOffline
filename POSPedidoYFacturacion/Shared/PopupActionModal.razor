<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Titulo</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <p>@Mensaje</p>
            </div>
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case "Ok":
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case "OkCancel":
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case "Options":
                        foreach (var item in Buttons)
                        {
                            <button type="button" class="btn" @onclick="@(()=>ModalSelect(item))">item</button>
                        }
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string Titulo { get; set; }

    [Parameter]
    public string Mensaje { get; set; }

    [Parameter]
    public string DialogType { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<string> Option { get; set; }

    [Parameter]
    public string[] Buttons { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalSelect(string option)
    {
        return Option.InvokeAsync(option);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
}
