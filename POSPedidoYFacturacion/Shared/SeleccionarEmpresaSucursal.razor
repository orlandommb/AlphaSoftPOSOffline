@page "/seleccionarempresasucursal"

@layout BlankLayout
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ProtectedLocalStorage LocalStorage
@inject IMessage IMessage
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProv
@inject UserManager<Usuario> UserManager



    <div class="middle-box">
        <div class="col-sm-12">
            @if (EmpresaSeleccionada == false)
            {
                if (IsBusy)
                {

                    <div class="middle-box">
                        <MudProgressCircular Indeterminate="true" Color="Color.Info"/>
                    </div>

                }
                else
                {
                    <div style="align-content: center; text-align: center">
                        <h1>Seleccione una Empresa haciendo clic en el recuadro:</h1>
                        <RadzenDataList WrapItems="true" AllowPaging="true" PageSize="5" Data="@Empresas" TItem="Empresa"
                                        Style="border-radius: 20px; padding:10px">
                            <Template Context="CM">
                                <RadzenCard Style="width:300px;border-radius: 20px" @onclick="@(() => SeleccionarEmpresa(CM))">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <RadzenImage Path="@CM.Logo" Style="width:130px;height:130px" />
                                            <div style="margin-top:10px">Nombre:</div>
                                            <b>@CM.Nombre</b>
                                        </div>
                                    </div>

                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </div>
                }
            }
            else
            {
                if (IsBusy)
                {

                    <div class="middle-box">
                        <MudProgressCircular Indeterminate="true" Color="Color.Info"/>
                    </div>

                }
                else
                {
                    <div style="align-content: center; text-align: center">
                        <h1>Seleccione una Sucursal haciendo clic en el recuadro:</h1>
                        <RadzenDataList WrapItems="true" AllowPaging="true" PageSize="10" Data="@Sucursales" TItem="Sucursal"
                                        Style="box-shadow: 5px 10px 18px #888888; border-radius: 20px">
                            <Template Context="SUC">
                                <RadzenCard Style="width:300px;" @onclick="@(() => SeleccionarSucursal(SUC))">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <RadzenImage Path="@Empresa.Logo" Style="width:130px;height:130px" />
                                            <div style="margin-top:10px">Nombre:</div>
                                            <b>@SUC.Nombre</b>
                                        </div>
                                    </div>

                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </div>
                }
            }
        </div>
    </div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private List<Empresa> Empresas { get; set; } = new List<Empresa>();
    private List<Sucursal> Sucursales { get; set; } = new List<Sucursal>();
    private bool IsBusy = false;
    private bool EmpresaSeleccionada = false;
    private Empresa Empresa { get; set; } = new Empresa();
    private Usuario Usuario { get; set; }= new Usuario();

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;
        await CargarUsuario();
        await CargarEmpresas();
        IsBusy = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AccesoDirectoPredeterminado();
        }
        await AccesoDirectoPredeterminado();
    }

    public async Task CargarEmpresas()
    {

        using var DbContext = DbContextFactory.CreateDbContext();
        
        Empresas = await DbContext.UsuarioEmpresas.Where(ue=>ue.UsuarioId == Usuario.Id).Select(ue=>ue.Empresa).ToListAsync();
        
        
    }
    
    public async Task CargarUsuario()
    {

        var AuthState = await AuthProv.GetAuthenticationStateAsync();
        Usuario = await UserManager.FindByNameAsync(AuthState.User.Identity.Name);
        
    }

    public async Task CargarSucursales(int EmpresaId)
    {
        IsBusy = true;

        using var DbContext = DbContextFactory.CreateDbContext();
        
        Sucursales = await DbContext.UsuarioSucursales
        .Include(us=>us.Sucursal)
        .ThenInclude(suc=>suc.Empresa)
        .Where(us=>us.UsuarioId == Usuario.Id && us.Sucursal.EmpresaId == EmpresaId).Select(us=>us.Sucursal).ToListAsync();
        
        IsBusy = false;
        StateHasChanged();
    }

    public async Task SeleccionarEmpresa(Empresa DTO)
    {
        Empresa = DTO;
        await LocalStorage.SetAsync("Empresa", DTO);
        await CargarSucursales(DTO.Id);
        EmpresaSeleccionada = true;
    }

    public async Task SeleccionarSucursal(Sucursal DTO)
    {
        await LocalStorage.SetAsync("Sucursal", DTO);
        NavManager.NavigateTo("/");
    }

    public async Task AccesoDirectoPredeterminado()
    {
        if (Empresas.Count == 1)
        {

            var CentroPredeterminado = Empresas.FirstOrDefault();

            await SeleccionarEmpresa(CentroPredeterminado);

            if (Sucursales.Count == 1)
            {
                var SucursalPredeterminada = Sucursales.FirstOrDefault();

                await SeleccionarSucursal(SucursalPredeterminada);
            }
        }
    }
}