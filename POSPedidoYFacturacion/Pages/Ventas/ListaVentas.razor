@page "/ventas"
@attribute [Authorize]

@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IMessage IMessage
@inject NavigationManager NavManager
@inject ProtectedLocalStorage LocalStorage

<MudPaper>
    <MudToolBar>
        <h5>Lista de Ventas</h5>
        <MudSpacer />
    </MudToolBar>
</MudPaper>

<RadzenCard Style="padding:15px; font-size:small">
    <div class="row">
        <div class="col-sm-3">
            <div class="form-group">
                <MudDateRangePicker Label="Desde - Hasta" Margin="Margin.Dense" Editable="true" @bind-DateRange="Fecha" />
            </div>
        </div>

        <div class="col-sm-2">
            <div class="form-group">
                    <MudTextField T="string" Label="Codigo" Margin="Margin.Dense" @bind-Value="@Codigo" />
            </div>
        </div>
        
         <div class="col-sm-3">
            <div class="form-group">
                    <MudTextField T="string" Label="Nombre de Cliente" Margin="Margin.Dense" @bind-Value="@Nombre" />
            </div>
        </div>
        <div class="col-sm-2">
            <div class="form-group">
                <RadzenLabel Text="Tipos de ordenes:" />
                <div>
                    <RadzenDropDown AllowClear="true"
                                    AllowFiltering="true"
                                    FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="Radzen.StringFilterOperator.Contains"
                                    Data="@TiposOrdenes"
                                    TValue="int?"
                                    TextProperty="Nombre"
                                    ValueProperty="Id"
                                    @bind-Value="@TipoOrdenSeleccionada" />
                </div>
            </div>
        </div>

        <div class="col-sm-1">
            <div class="form-group">
                <RadzenLabel Text="Nulo:" />
                <div>
                    <RadzenCheckBox @bind-Value="Nulo" Name="Activo" />
                </div>
            </div>
        </div>

        <div class="col-sm-1">
            <div class="form-group">
                <MudTooltip Text="Buscar">
                    <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="MudBlazor.Variant.Outlined" Color="Color.Info" OnClick="CargarVentas" />
                </MudTooltip>
            </div>
        </div>
    </div>
</RadzenCard>
<div style="margin:10px"></div>
@if (IsBusy)
{
    <div class="middle-box">
        <MudProgressCircular Indeterminate="true" Color="Color.Info"/>
    </div>
}
else
{
    <RadzenCard>
        <div class="table-responsive-sm" style="width:100%;height:400px; overflow:scroll">
            <table class="table table-sm" >
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">Tipo</th>
                        <th scope="col">Tipo Orden</th>
                        <th scope="col">Nombre</th>
                        <th scope="col">Celular</th>
                        <th scope="col">Fecha Finalizado</th>
                        <th scope="col">Usuario</th>
                        <th scope="col">Sub-Total</th>
                        <th scope="col">Descuento</th>
                        <th scope="col">Delivery</th>
                        <th scope="col">Total</th>
                        <th scope="col" style="width:10%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Ventas)
                    {
                        <tr>
                            <th scope="row">@item.Id</th>
                            <th scope="row">@item.TipoFactura.Nombre</th>
                            @if (item.TipoOrdenId != null)
                            {
                                <td>@(item.TipoOrden.Nombre)</td>
                            }
                            else
                            {
                                <td>@("Sin pedido")</td>
                            }
                            <td>@item.NombreCliente</td>
                            <td>@item.CelularCliente</td>
                            <td>@item.FechaFinalizado</td>
                            <td>@item.Usuario.UserName</td>
                            <td>@String.Format("{0:C2}", item.SubTotal)</td>
                            <td>@String.Format("{0:C2}", item.Descuento)</td>
                            <td>@String.Format("{0:C2}", item.Delivery)</td>
                            <td>@String.Format("{0:C2}", item.Total)</td>
                            <td>
                                <RadzenButton Icon="preview" Click="@(() => BtnVistaPreviaClick(item.Id))"></RadzenButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </RadzenCard>
}

@code {
    private Empresa Empresa { get; set; } = new Empresa();
    private Sucursal Sucursal { get; set; } = new Sucursal();
    private List<Venta> Ventas { get; set; } = new List<Venta>();
    private List<TipoOrden> TiposOrdenes { get; set; } = new List<TipoOrden>();
    private List<SubCategoria> SubCategorias { get; set; } = new List<SubCategoria>();

    private int? TipoOrdenSeleccionada { get; set; }

    private bool Nulo { get; set; } = false;

    private DateRange Fecha = new DateRange(DateTime.Now.AddDays(-1), DateTime.Now);

    private string Codigo { get; set; }
    private string Nombre { get; set; }

    private bool IsBusy { get; set; } = false;


     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEmpresa();
            await CargarSucursal();
            await CargarTipoOrdenes();
        }
    }
    private async Task CargarEmpresa()
    {
        var result = await LocalStorage.GetAsync<Empresa>("Empresa");
        if (result.Success)
        {
            Empresa = result.Value;
            StateHasChanged();
        }
    }

    private async Task CargarSucursal()
    {
        var result = await LocalStorage.GetAsync<Sucursal>("Sucursal");
        if (result.Success)
        {
            Sucursal = result.Value;
            StateHasChanged();
        }
    }

    public async Task CargarVentas()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();
        var Lista = await DbContext.Ventas
            .Include(p => p.VentaDetalles)
            .Include(p => p.TipoFactura)
            .Include(p => p.TipoOrden)
            .Include(p => p.Usuario)
            .Where(p => p.EmpresaId == Empresa.Id && p.SucursalId == Sucursal.Id && p.FechaFinalizado >= Fecha.Start &&
            p.FechaFinalizado <= Fecha.End &&
            p.Nulo == Nulo &&
                        (Nombre == null || p.NombreCliente.Contains(Nombre)) &&
                        (Codigo == null || p.Id == Convert.ToInt32(Codigo)) &&
                        (TipoOrdenSeleccionada == null || p.TipoOrdenId == TipoOrdenSeleccionada))
            .ToListAsync();

        if (Lista == null)
        {
            await IMessage.Alert("No hay ventas creadas!");
        }
        else
        {
            IsBusy = false;
            Ventas = Lista;
            StateHasChanged();
        }
    }

    public async Task CargarTipoOrdenes()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        var Lista = await DbContext.TipoOrdenes.ToListAsync();


        if (Lista == null)
        {
            await IMessage.Alert("No hay tipos ordenes creados!");
        }
        else
        {
            IsBusy = false;
            TiposOrdenes = Lista;
            StateHasChanged();
        }
    }



    public void BtnVistaPreviaClick(int Id)
    {
        NavManager.NavigateTo("/ventas/vista/" + Id);
    }


    @*private void Nuevo()
        {
            NavManager.NavigateTo("/registrodeorden");
        }*@
}
