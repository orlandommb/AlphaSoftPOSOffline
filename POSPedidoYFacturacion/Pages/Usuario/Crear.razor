@page "/usuarios/crear/{Id?}"

@attribute [Authorize(Roles = "SuperAdmin,Admin")]

@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserManager<Usuario> UserManager
@inject RoleManager<Rol> RoleManager
@inject IMessage IMessage
@inject ProtectedLocalStorage LocalStorage

<RadzenCard>
    <EditForm Model="UsuarioDTO" OnValidSubmit="CrearUsuario">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">
            <div class="row">
                <div class="col-6">


                    <div class="form-group">
                        <label>Usuario:</label>
                        <div>
                            <InputText Class="form-control" @bind-Value="@UsuarioDTO.UserName" />
                            <ValidationMessage For="@(() => UsuarioDTO.UserName)" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Password:</label>
                        <div>
                            <InputText Class="form-control" type="password" @bind-Value="@Password"></InputText>
                            <ValidationMessage For="@(() => Password)" />
                        </div>
                    </div>

                </div>




                <div class="col-6">

                    <div class="form-group">
                        <label>Celular:</label>
                        <div>
                            <InputText Class="form-control" @bind-Value="@UsuarioDTO.PhoneNumber"></InputText>
                            <ValidationMessage For="@(() => UsuarioDTO.PhoneNumber)" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Email:</label>
                        <div>
                            <InputText Class="form-control" @bind-Value="@UsuarioDTO.Email"></InputText>
                            <ValidationMessage For="@(() => UsuarioDTO.Email)" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Roles:</label>
                        <div>

                            <RadzenListBox class="form-control"
                                           AllowFiltering="true"
                                           FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive"
                                           @bind-Value=@RolesEnUsuario
                                           Multiple="true"
                                           Data=@Roles
                                           TextProperty="Name"
                                           ValueProperty="Name"
                                           Style="height:200px" />
                        </div>
                    </div>

                </div>

            </div>
        </div>
        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Primary"
                      ButtonType="Radzen.ButtonType.Submit"
                      Text="Registar" />


    </EditForm>
</RadzenCard>

@code {
    [Parameter]
    public string Id { get; set; }
    private Empresa Empresa { get; set; } = new Empresa();
    private Sucursal Sucursal { get; set; } = new Sucursal();

    Usuario UsuarioDTO { get; set; } = new Usuario();
    private string Password { get; set; }

    List<Rol> Roles { get; set; } = new List<Rol>();
    IEnumerable<string> RolesEnUsuario { get; set; } = new List<string>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEmpresa();
            await CargarSucursal();
            await CargarRoles();

            if (!string.IsNullOrEmpty(Id))
            {
                await CargarUsuario();
                RolesEnUsuario = (List<string>)await UserManager.GetRolesAsync(UsuarioDTO);
            }
            StateHasChanged();
        }
    }

    private async Task CargarEmpresa()
    {
        var result = await LocalStorage.GetAsync<Empresa>("Empresa");
        if (result.Success)
        {
            Empresa = result.Value;
            UsuarioDTO.EmpresaId = Empresa.Id;
            StateHasChanged();
        }
    }

    private async Task CargarSucursal()
    {
        var result = await LocalStorage.GetAsync<Sucursal>("Sucursal");
        if (result.Success)
        {
            Sucursal = result.Value;
            StateHasChanged();
        }
    }

    public async Task CrearUsuario()
    {

        if (RolesEnUsuario.Contains("SuperAdmin") && UsuarioDTO.UserName != "AlphaSoft" )
        {
            await IMessage.Alert("El rol de Super Administrador esta reservado para el uso exclusivo de AlphaSoft");
            return;
        }

        if (string.IsNullOrEmpty(Id))
        {

            var Response = await UserManager.CreateAsync(UsuarioDTO, Password);

            if (Response.Succeeded)
            {
                using var DbContext = DbContextFactory.CreateDbContext();
                var User = await UserManager.FindByNameAsync(UsuarioDTO.UserName);
                
                var UsuarioEmpresa = new UsuarioEmpresa()
                {
                    UsuarioId = User.Id,
                    EmpresaId = Empresa.Id
                };

                await DbContext.AddAsync(UsuarioEmpresa);
                
                
                var UsuarioSucursal = new UsuarioSucursal()
                {
                    UsuarioId = User.Id,
                    SucursalId = Sucursal.Id
                };

                await DbContext.AddAsync(UsuarioSucursal);

                await DbContext.SaveChangesAsync();

                await UserManager.AddToRolesAsync(UsuarioDTO, RolesEnUsuario);
                await IMessage.Success("Usuario creado!");
            }
            else
            {
                var ListaErrores = new List<string>();
                foreach (var item in Response.Errors)
                {
                    ListaErrores.Add(item.Description);
                }
                await IMessage.Error($"No se pudo crear usuario: {ListaErrores.FirstOrDefault().ToString()}");
            }
        }
        else
        {
            var Usuario = await UserManager.FindByIdAsync(Id);

            Usuario.UserName = UsuarioDTO.UserName;
            Usuario.NormalizedUserName = UsuarioDTO.NormalizedUserName;
            Usuario.PhoneNumber = UsuarioDTO.PhoneNumber;
            Usuario.Email = UsuarioDTO.Email;

            var Response = await UserManager.UpdateAsync(Usuario);

            if (Response.Succeeded)
            {
                var list = await UserManager.GetRolesAsync(Usuario);

                IEnumerable<string> rolesToRemove = list.Except(RolesEnUsuario);


                if (rolesToRemove.Count() > 0)
                {
                    await UserManager.RemoveFromRolesAsync(Usuario, rolesToRemove);
                }
                
                List<string> rolesToAdd = new List<string>();

                foreach (var rol in RolesEnUsuario)
                {
                    if (!await UserManager.IsInRoleAsync(Usuario, rol))
                    {
                        rolesToAdd.Add(rol);
                    }
                }

                if (rolesToAdd.Count() > 0)
                {
                    await UserManager.AddToRolesAsync(Usuario, rolesToAdd);
                }

                await IMessage.Success("Usuario modificado!");
            }
            else
            {
                var ListaErrores = new List<string>();
                foreach (var item in Response.Errors)
                {
                    ListaErrores.Add(item.Description);
                }
                await IMessage.Error($"No se pudo modificar usuario: {ListaErrores.FirstOrDefault().ToString()}");
            }
        }
    }


    public async Task CargarRoles()
    {
        Roles= await RoleManager.Roles.ToListAsync();

        StateHasChanged();
    }

    public async Task CargarUsuario()
    {
        UsuarioDTO = await UserManager.FindByIdAsync(Id);
        StateHasChanged();
    }


}
