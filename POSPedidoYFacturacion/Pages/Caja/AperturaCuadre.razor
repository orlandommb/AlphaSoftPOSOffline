@page "/aperturacuadre"
@attribute [Authorize(Roles = "SuperAdmin,Admin,Cajero/a")]

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IMessage IMessage
@inject AuthenticationStateProvider AuthStateProv
@inject UserManager<Usuario> UserManager
@inject ProtectedLocalStorage LocalStorage

<RadzenCard>
    <h3>Aperturar Cuadre</h3>
</RadzenCard>
<RadzenCard class="middle-box">
    @if (IsBusy)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Info"/>
    }
    else
    {
        @if (HayCuadreAbierto == true)
        {
            <h3>Hay un cuadre abierto, debe cerrar el cuadre para poder abrir otro!</h3>
        }
        else
        {
            <EditForm Model="Cuadre" OnValidSubmit="AbrirCuadre">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>Fecha:</label>
                            <div>
                                <RadzenDatePicker @bind-Value="Cuadre.FechaApertura" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Usuario:</label>
                            <div>
                                <RadzenLabel Text="@Cuadre.Usuario.UserName" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Fondo de Caja:</label>
                            <div>
                                <RadzenNumeric @bind-Value="Cuadre.FondoCaja" TValue="Decimal" Format="0.00" />
                            </div>
                        </div>
                    </div>
                </div>
                <RadzenButton Text="Aperturar" Disabled="@IsBusy" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" />
            </EditForm>
        }
    }
</RadzenCard>

@code{

    private Empresa Empresa { get; set; } = new Empresa();
    private Sucursal Sucursal { get; set; } = new Sucursal();
    private Cuadre Cuadre { get; set; } = new Cuadre();
    private bool HayCuadreAbierto { get; set; } = false;
    private Usuario Usuario { get; set; } = new Usuario();

    private bool IsBusy { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        IsBusy = true;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEmpresa();
            await CargarSucursal();
            await ChequearCuadre();
        }
    }
    private async Task CargarEmpresa()
    {
        var result = await LocalStorage.GetAsync<Empresa>("Empresa");
        if (result.Success)
        {
            Empresa = result.Value;
            Cuadre.EmpresaId = Empresa.Id;
            StateHasChanged();
        }
    }

    private async Task CargarSucursal()
    {
        var result = await LocalStorage.GetAsync<Sucursal>("Sucursal");
        if (result.Success)
        {
            Sucursal = result.Value;
            Cuadre.SucursalId = Sucursal.Id;
            StateHasChanged();
        }
    }

    private async Task AbrirCuadre()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        Cuadre.EmpresaId = Empresa.Id;
        Cuadre.SucursalId = Sucursal.Id;
        
        var CuadreNuevo = new Cuadre();

        CuadreNuevo = Cuadre;

        CuadreNuevo.UsuarioId = Usuario.Id;
        CuadreNuevo.Usuario = null;

        await DbContext.AddAsync(CuadreNuevo);
        await DbContext.SaveChangesAsync();
        await IMessage.Success("Cuadre abierto!");
        await ChequearCuadre();
        IsBusy = false;
    }

    public async Task GetUsuario()
    {
        IsBusy = true;

        var AState = await AuthStateProv.GetAuthenticationStateAsync();
        var User = AState.User;

        Usuario = await UserManager.FindByNameAsync(User.Identity.Name);

        Cuadre.Usuario = Usuario;
        Cuadre.UsuarioId = Usuario.Id;

        IsBusy = false;
    }

    private async Task ChequearCuadre()
    {
        IsBusy = true;

        using var DbContext = DbContextFactory.CreateDbContext();

        var CuadreActivo = await DbContext.Cuadres.SingleOrDefaultAsync(c => c.EmpresaId == Empresa.Id && c.SucursalId == Sucursal.Id && c.Cerrado == false);
        if (CuadreActivo != null)
        {
            HayCuadreAbierto = true;
        }
        else
        {
            HayCuadreAbierto = false;
            Cuadre = new Cuadre();
            await GetUsuario();
            Cuadre.FechaApertura = DateTime.Now;
        }

        IsBusy = false;
        StateHasChanged();
    }
}    