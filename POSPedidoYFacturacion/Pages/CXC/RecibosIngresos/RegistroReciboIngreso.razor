@page "/cxcregistrarri/{Id:int?}"
@page "/cxcregistrarri/param/cliente/{ClienteId:int?}"
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IMessage IMessage
@inject AuthenticationStateProvider AuthStateProv
@inject UserManager<Usuario> UserManager
@inject ProtectedLocalStorage LocalStorage

<RadzenCard>
    <h5>Registro de Recibo de Ingreso</h5>
</RadzenCard>
@if (IsBusy)
{
    <div class="middle-box">
        <MudProgressCircular Indeterminate="true" Color="Color.Info"/>
    </div>
}
else
{
    <RadzenCard>
    @if (!CuadreAbierto)
    {
        <div class="d-flex justify-content-center" style="margin-top: 50px;">
            <h1>No hay un cuadre activo, por favor habra un cuadre para poder continuar!</h1>
        </div>
    }
    else
        {
            <EditForm Model="ReciboIngreso" OnValidSubmit="RegistrarNotaDebito">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <RadzenCard Style="padding:5px">
                    <div class=row>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Cliente:</label>
                                <div>
                                    <RadzenDropDown AllowFiltering="true" Data="Clientes" @bind-Value="ReciboIngreso.ClienteId"
                                TextProperty="Nombre" ValueProperty="Id" Change="CargarVentasACredito" />
                                    <ValidationMessage For="@(()=> ReciboIngreso.ClienteId)" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Tipo Nota de Credito:</label>
                                <div>
                                    <RadzenDropDown Data="TipoRecibosIngreso"
                                @bind-Value="ReciboIngreso.CXCTransaccionTipoDocumentoId" TextProperty="Nombre"
                                ValueProperty="Id" />
                                    <ValidationMessage For="@(()=> ReciboIngreso.CXCTransaccionTipoDocumentoId)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Fecha:</label>
                                <div>
                                    <RadzenDatePicker @bind-Value="ReciboIngreso.Fecha" />
                                    <ValidationMessage For="@(()=> ReciboIngreso.Fecha)" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label>Aplicar Monto a Facturas:</label>
                                <div>
                                    <MudButton OnClick="AplicarMonto" Disabled="MontosAplicados"
                                StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary"
                                Variant="Variant.Outlined">Aplicar</MudButton>
                                    <MudButton OnClick="RetirarAplicacionMonto" Disabled="!MontosAplicados"
                                StartIcon="@Icons.Material.Outlined.Clear" Color="Color.Secondary"
                                Variant="Variant.Outlined">Quitar</MudButton>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Monto:</label>
                                <div>
                                    <RadzenNumeric Disabled="@MontosAplicados" ShowUpDown="false" @bind-Value="ReciboIngreso.Monto"
                                TValue="decimal" Format="0.00" Change="@(args => OnChangeMonto(args))" />
                                    <ValidationMessage For="@(()=> ReciboIngreso.Monto)" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Monto Restante Aplicar:</label>
                                <div>
                                    <RadzenLabel Style="color: indianred" Text="@MontoRestanteAplicar.ToString("C2")" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Salvar:</label>
                                <div>
                                    <MudButton OnClick="RegistrarNotaDebito" StartIcon="@Icons.Material.Outlined.Save"
                                Color="Color.Primary" Variant="Variant.Outlined">Salvar</MudButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </RadzenCard>
                <RadzenCard Style="padding:15px">
                    <div class="row">
                        <div class="table-responsive-sm" style="width: 100%; overflow:scroll; height:500px">
                            <table class="table table-sm" style="width: 100%">
                                <thead>
                                    <tr>
                                        <th col="scope">No. Factura</th>
                                        <th col="scope">Fecha</th>
                                        <th col="scope">Balance Antes</th>
                                        <th col="scope">Monto a aplicar</th>
                                        <th col="scope">Balance Despues</th>
                                        <th col="scope"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ReciboIngreso.CXCTransaccionDetalles.Count > 0)
                                    {
                                        @foreach (var cxcventas in ReciboIngreso.CXCTransaccionDetalles)
                                        {
                                            <tr>
                                                <td>@cxcventas.Venta.Id</td>
                                                @if (cxcventas.Venta.FechaFinalizado.HasValue)
                                                {
                                                    <td>@cxcventas.Venta.FechaFinalizado.Value.ToString("d")</td>
                                                }
                                                <td>@cxcventas.BalanceAntes</td>
                                                <td>
                                                    <RadzenNumeric @bind-Value="cxcventas.MontoAAplicar" ShowUpDown="false"
                                        Format="0.00" TValue="decimal"
                                        Change="@(args => OnChangeMontoAplicado(args, cxcventas))"></RadzenNumeric>
                                                </td>
                                                <td>@cxcventas.BalanceDespues</td>
                                                <td></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </RadzenCard>
            </EditForm>
        }
        </RadzenCard>
}

@code
{
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int? ClienteId { get; set; }
    private Empresa Empresa { get; set; } = new Empresa();
    private Sucursal Sucursal { get; set; } = new Sucursal();
    private CXCTransaccion ReciboIngreso { get; set; } = new CXCTransaccion();
    private List<Cliente> Clientes { get; set; }
    private List<CXCTransaccionTipoDocumento> TipoRecibosIngreso { get; set; }
    private List<CXCVentaBalance> VentasCreditoPendientes { get; set; }

    public decimal MontoRestanteAplicar { get; set; }
    public bool MontosAplicados { get; set; } = false;
    public bool CuadreAbierto { get; set; } = false;
    public bool IsBusy { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        
        ReciboIngreso.CXCTransaccionTipoId = 3;
        ReciboIngreso.Fecha = DateTime.Now;
        await CargarUsuario();

        if (Id == null && ClienteId != null)
        {
            ReciboIngreso.ClienteId = (int)ClienteId;
            await CargarVentasACredito();
        }
        else if (Id != null && ClienteId == null)
        {
            await CargarTransaccion();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEmpresa();
            await CargarSucursal();
            await RevisarCuadre();
            await CargarClientes();
            await CargarTipoRecibosIngreso();
        }
    }
    private async Task CargarEmpresa()
    {
        var result = await LocalStorage.GetAsync<Empresa>("Empresa");
        if (result.Success)
        {
            Empresa = result.Value;
            ReciboIngreso.EmpresaId = Empresa.Id;
            StateHasChanged();
        }
    }

    private async Task CargarSucursal()
    {
        var result = await LocalStorage.GetAsync<Sucursal>("Sucursal");
        if (result.Success)
        {
            Sucursal = result.Value;
            ReciboIngreso.SucursalId = Sucursal.Id;
            StateHasChanged();
        }
    }

    public async Task RevisarCuadre()
    {
        using var DbContext = DbContextFactory.CreateDbContext();

        var cuadre = await DbContext.Cuadres
        .Include(c => c.Usuario)
        .Include(c => c.Ventas)
        .SingleOrDefaultAsync(c => c.EmpresaId == Empresa.Id && c.SucursalId == Sucursal.Id && c.Cerrado == false);
        
        if(cuadre != null)
        {
            ReciboIngreso.CuadreId = cuadre.Id;
            CuadreAbierto = true;
        }
        else
        {
            CuadreAbierto = false;
        }
        StateHasChanged();
    }
    private async Task CargarVentasACredito()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        VentasCreditoPendientes = await DbContext.CXCVentaBalances
        .Include(cxcv => cxcv.Venta)
        .ThenInclude(v => v.Almacen)
        .Include(cxcv => cxcv.Venta)
        .ThenInclude(v => v.Cliente)
        .Include(cxcv => cxcv.Venta)
        .ThenInclude(v => v.TipoFactura)
        .Where(cxcv =>
        cxcv.Venta.TipoFacturaId == 1 &&
        cxcv.Venta.ClienteId == ReciboIngreso.ClienteId &&
        cxcv.Balance > 0)
        .ToListAsync();



        @if (VentasCreditoPendientes.Count > 0)
        {

            foreach (var ventacred in VentasCreditoPendientes)
            {
                var NewNCD = new CXCTransaccionDetalle()
                {
                    VentaId = ventacred.VentaId,
                    Venta = ventacred.Venta,
                    BalanceAntes = ventacred.Balance,
                    BalanceDespues = ventacred.Balance
                };

                ReciboIngreso.CXCTransaccionDetalles.Add(NewNCD);
            }
        }

        IsBusy = false;
    }

    public async Task CargarUsuario()
    {

        IsBusy = true;
        var AState = await AuthStateProv.GetAuthenticationStateAsync();
        var User = AState.User;
        var user = await UserManager.FindByNameAsync(User.Identity.Name);
        ReciboIngreso.UsuarioId = user.Id;
        IsBusy = false;
    }

    private async Task CargarTransaccion()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        ReciboIngreso = await DbContext.CXCTransacciones
        .Include(nc => nc.Cliente)
        .Include(nc => nc.Usuario)
        .Include(nc => nc.CXCTransaccionTipoDocumento)
        .Include(nc => nc.CXCTransaccionDetalles)
        .ThenInclude(ncd => ncd.Venta)
        .SingleOrDefaultAsync(nd => nd.Id == Id && nd.CXCTransaccionTipoId == 3);
        IsBusy = false;
    }

    private async Task CargarClientes()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        Clientes = await DbContext.Clientes.Where(c => c.EmpresaId == Empresa.Id && c.SucursalId == Sucursal.Id).ToListAsync();
        IsBusy = false;
        StateHasChanged();
    }

    private async Task CargarTipoRecibosIngreso()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        TipoRecibosIngreso = await DbContext.CXCTransaccionTipoDocumentos.Where(ttd => ttd.EmpresaId == Empresa.Id && ttd.SucursalId == Sucursal.Id && ttd.CXCTransaccionTipoId == 3).ToListAsync();

        IsBusy = false;
        StateHasChanged();
    }

    private void OnChangeMontoAplicado(dynamic valor, CXCTransaccionDetalle item)
    {
        var detalle = ReciboIngreso.CXCTransaccionDetalles.SingleOrDefault(cxcd => cxcd.VentaId == item.VentaId);
        detalle.MontoAAplicar = valor;
        detalle.BalanceDespues = detalle.BalanceAntes - valor;

        MontoRestanteAplicar = MontoRestanteAplicar - valor;
    }

    private void OnChangeMonto(dynamic valor)
    {
        MontoRestanteAplicar = valor;
    }

    private void AplicarMonto()
    {
        if (MontoRestanteAplicar > 0)
        {
            foreach (var item in ReciboIngreso.CXCTransaccionDetalles)
            {
                if (MontoRestanteAplicar > item.BalanceAntes)
                {
                    OnChangeMontoAplicado(item.BalanceAntes, item);
                }
                else
                {
                    OnChangeMontoAplicado(MontoRestanteAplicar, item);
                }
            }

            MontosAplicados = true;
        }
    }

    private void RetirarAplicacionMonto()
    {
        foreach (var item in ReciboIngreso.CXCTransaccionDetalles)
        {
            MontoRestanteAplicar += item.MontoAAplicar;
            item.BalanceDespues = item.BalanceAntes;
            item.MontoAAplicar = 0;
        }

        MontosAplicados = false;
    }

    private async Task RegistrarNotaDebito()
    {
        if (ReciboIngreso.Monto <= 0)
        {
            await IMessage.Alert("El monto debe de ser mayor a cero");
            return;
        }

        var itemaplicados = ReciboIngreso.CXCTransaccionDetalles.Sum(nc => nc.MontoAAplicar);

        if (itemaplicados <= 0)
        {
            await IMessage.Alert("El detalle no tiene montos aplicados, debe de aplicar montos a las facturas!");
            return;
        }

        if (MontoRestanteAplicar != 0)
        {
            await IMessage.Alert("El monto restante aun no esta aplicado completamente, debe aplicar la totalidad del monto!");
            return;
        }
        
        foreach(var detalle in ReciboIngreso.CXCTransaccionDetalles.ToList())
        {
            if (detalle.Venta.FechaFinalizado > ReciboIngreso.Fecha)
            {
                await IMessage.Alert("La fecha de la transaccion no puede ser menor a la de las facturas seleccionadas!");
                return;
            }
        }

        IsBusy = true;

        ReciboIngreso.FechaRegistro = DateTime.Now;

        using var DbContext = DbContextFactory.CreateDbContext();

        var Nueva = new CXCTransaccion();

        Nueva = ReciboIngreso;
        Nueva.Cuadre = null;

        foreach (var item in Nueva.CXCTransaccionDetalles.ToList())
        {
            item.Venta = null;
            if (item.MontoAAplicar == 0)
            {
                ReciboIngreso.CXCTransaccionDetalles.Remove(item);
            }
        }

        await DbContext.AddAsync(Nueva);


        foreach (var item in ReciboIngreso.CXCTransaccionDetalles)
        {
            if (item.MontoAAplicar > 0)
            {
                var CXCBalanceVenta = await DbContext.CXCVentaBalances.SingleOrDefaultAsync(cxcvb => cxcvb.VentaId == item.VentaId);
                CXCBalanceVenta.Balance = CXCBalanceVenta.Balance - item.MontoAAplicar;
                DbContext.Update(CXCBalanceVenta);
                
            }
        }
        await DbContext.SaveChangesAsync();

        ReciboIngreso = new CXCTransaccion();
        IsBusy = false;
        await IMessage.Success("Registro exitoso!");

    }
}