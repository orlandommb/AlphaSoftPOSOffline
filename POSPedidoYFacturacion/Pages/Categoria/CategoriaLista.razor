@page "/categorias"
@attribute [Authorize(Roles = "SuperAdmin,Admin")]
@inject NavigationManager NavManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IMessage IMessage
@inject ProtectedLocalStorage LocalStorage

<MudPaper>
    <MudToolBar>
        <h5>Lista de Categorias</h5>
        <MudSpacer />
        <MudTooltip Text="Nueva Categoria">
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="MudBlazor.Variant.Outlined" Color="Color.Info" OnClick="Nuevo" />
        </MudTooltip>
    </MudToolBar>
</MudPaper>

<RadzenCard Style="padding:5px;font-size:small; border-radius: 20px">
    <div class="row">
        <div class="col-sm-10">
            <div class="form-group">
                <RadzenLabel Text="Nombre:" />
                <div>
                    <RadzenTextBox @bind-Value="@Nombre" />
                </div>
            </div>
        </div> 
        <div class="col-sm-2">
            <div class="form-group">
                <MudTooltip Text="Buscar">
                    <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="MudBlazor.Variant.Outlined" OnClick="CargarCategorias" />
                </MudTooltip>               
            </div>
        </div>
    </div>
</RadzenCard>

<div style="margin:10px"></div>
@if (IsBusy)
{
    <div class="middle-box">
        <MudProgressCircular Indeterminate="true" Color="Color.Info"/>
    </div>
}
else
{
    <RadzenCard Style="padding:5px;font-size:small">

        <div class="table-responsive-sm" style="width:100%;height:400px; overflow:scroll">
            <table class="table table-sm" style="width:100%">
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">Nombre</th>
                        <th scope="col" style="width:10%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Categorias)
                    {
                        <tr>
                            <th scope="row">@item.Id</th>
                            <td>@item.Nombre</td>
                            <td>
                                <RadzenButton Icon="preview" Click="@(() => BtnEditarClick(item.Id))"></RadzenButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


    </RadzenCard>
}

@code {
    private Empresa Empresa { get; set; } = new Empresa();
    private Sucursal Sucursal { get; set; } = new Sucursal();
    public List<Categoria> Categorias { get; set; } = new List<Categoria>();
    public bool IsBusy { get; set; } = false;

    public string Nombre { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarEmpresa();
            await CargarSucursal();
        }
    }
    private async Task CargarEmpresa()
    {
        var result = await LocalStorage.GetAsync<Empresa>("Empresa");
        if (result.Success)
        {
            Empresa = result.Value;
            StateHasChanged();
        }
    }

    private async Task CargarSucursal()
    {
        var result = await LocalStorage.GetAsync<Sucursal>("Sucursal");
        if (result.Success)
        {
            Sucursal = result.Value;
            StateHasChanged();
        }
    }
    
    public async Task CargarCategorias()
    {
        IsBusy = true;
        using var DbContext = DbContextFactory.CreateDbContext();

        Categorias = await DbContext.Categorias.Where(c => c.EmpresaId == Empresa.Id && c.SucursalId == Sucursal.Id && (Nombre == null || c.Nombre.Contains(Nombre))).ToListAsync();

        IsBusy = false;
    }

    public void BtnEditarClick(int Id)
    {
        NavManager.NavigateTo("/categorias/crear/" + Id);
    }

    public void Nuevo()
    {
        NavManager.NavigateTo("/categorias/crear");
    }
}
